using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using NWayland.Protocols.Wayland;
using NWayland.Interop;
#nullable enable
// <auto-generated/>
namespace NWayland.Protocols.XdgForeignUnstableV2
{
    /// <summary>
    /// A global interface used for exporting surfaces that can later be importedusing xdg_importer.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZxdgExporterV2 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZxdgExporterV2()
        {
            NWayland.Protocols.XdgForeignUnstableV2.ZxdgExporterV2.WlInterface = new WlInterface("zxdg_exporter_v2", 1, new WlMessage[] {
                new WlMessage("destroy", "", new WlInterface*[] { }),
                new WlMessage("export_toplevel", "no", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.XdgForeignUnstableV2.ZxdgExportedV2.WlInterface), WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSurface.WlInterface) })
            }, new WlMessage[] { });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.XdgForeignUnstableV2.ZxdgExporterV2.WlInterface);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
            base.Dispose(true);
        }

        /// <summary>
        /// The export_toplevel request exports the passed surface so that it can later beimported via xdg_importer. When called, a new xdg_exported object willbe created and xdg_exported.handle will be sent immediately. See thecorresponding interface and event for details.<br/><br/>
        /// A surface may be exported multiple times, and each exported handle maybe used to create an xdg_imported multiple times. Only xdg_toplevelequivalent surfaces may be exported, otherwise an invalid_surfaceprotocol error is sent.<br/><br/>
        /// </summary>
        public NWayland.Protocols.XdgForeignUnstableV2.ZxdgExportedV2 ExportToplevel(NWayland.Protocols.Wayland.WlSurface @surface)
        {
            if (@surface == null)
                throw new ArgumentNullException("surface");
            WlArgument* __args = stackalloc WlArgument[] {
                WlArgument.NewId,
                @surface
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 1, __args, ref NWayland.Protocols.XdgForeignUnstableV2.ZxdgExportedV2.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.XdgForeignUnstableV2.ZxdgExportedV2(__ret, Version);
        }

        public interface IEvents
        {
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
        }

        /// <summary>
        /// These errors can be emitted in response to invalid xdg_exporterrequests.<br/><br/>
        /// </summary>
        public enum ErrorEnum
        {
            /// <summary>
            /// surface is not an xdg_toplevel<br/><br/>
            /// </summary>
            InvalidSurface = 0
        }

        private class ProxyFactory : IBindFactory<ZxdgExporterV2>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.XdgForeignUnstableV2.ZxdgExporterV2.WlInterface);
            }

            public ZxdgExporterV2 Create(IntPtr handle, int version)
            {
                return new ZxdgExporterV2(handle, version);
            }
        }

        public static IBindFactory<ZxdgExporterV2> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zxdg_exporter_v2";
        public const int InterfaceVersion = 1;

        public ZxdgExporterV2(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    /// <summary>
    /// A global interface used for importing surfaces exported by xdg_exporter.With this interface, a client can create a reference to a surface ofanother client.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZxdgImporterV2 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZxdgImporterV2()
        {
            NWayland.Protocols.XdgForeignUnstableV2.ZxdgImporterV2.WlInterface = new WlInterface("zxdg_importer_v2", 1, new WlMessage[] {
                new WlMessage("destroy", "", new WlInterface*[] { }),
                new WlMessage("import_toplevel", "ns", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.XdgForeignUnstableV2.ZxdgImportedV2.WlInterface), null })
            }, new WlMessage[] { });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.XdgForeignUnstableV2.ZxdgImporterV2.WlInterface);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
            base.Dispose(true);
        }

        /// <summary>
        /// The import_toplevel request imports a surface from any client given a handleretrieved by exporting said surface using xdg_exporter.export_toplevel.When called, a new xdg_imported object will be created. This new objectrepresents the imported surface, and the importing client canmanipulate its relationship using it. See xdg_imported for details.<br/><br/>
        /// </summary>
        public NWayland.Protocols.XdgForeignUnstableV2.ZxdgImportedV2 ImportToplevel(string @handle)
        {
            if (@handle == null)
                throw new ArgumentNullException("handle");
            using var __marshalled__handle = new NWaylandMarshalledString(@handle);
            WlArgument* __args = stackalloc WlArgument[] {
                WlArgument.NewId,
                __marshalled__handle
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 1, __args, ref NWayland.Protocols.XdgForeignUnstableV2.ZxdgImportedV2.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.XdgForeignUnstableV2.ZxdgImportedV2(__ret, Version);
        }

        public interface IEvents
        {
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
        }

        private class ProxyFactory : IBindFactory<ZxdgImporterV2>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.XdgForeignUnstableV2.ZxdgImporterV2.WlInterface);
            }

            public ZxdgImporterV2 Create(IntPtr handle, int version)
            {
                return new ZxdgImporterV2(handle, version);
            }
        }

        public static IBindFactory<ZxdgImporterV2> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zxdg_importer_v2";
        public const int InterfaceVersion = 1;

        public ZxdgImporterV2(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    /// <summary>
    /// An xdg_exported object represents an exported reference to a surface. Theexported surface may be referenced as long as the xdg_exported object notdestroyed. Destroying the xdg_exported invalidates any relationship theimporter may have established using xdg_imported.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZxdgExportedV2 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZxdgExportedV2()
        {
            NWayland.Protocols.XdgForeignUnstableV2.ZxdgExportedV2.WlInterface = new WlInterface("zxdg_exported_v2", 1, new WlMessage[] {
                new WlMessage("destroy", "", new WlInterface*[] { })
            }, new WlMessage[] {
                new WlMessage("handle", "s", new WlInterface*[] { null })
            });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.XdgForeignUnstableV2.ZxdgExportedV2.WlInterface);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
            base.Dispose(true);
        }

        public interface IEvents
        {
            /// <summary>
            /// The handle event contains the unique handle of this exported surfacereference. It may be shared with any client, which then can use it toimport the surface by calling xdg_importer.import_toplevel. A handlemay be used to import the surface multiple times.<br/><br/>
            /// </summary>
            void OnHandle(NWayland.Protocols.XdgForeignUnstableV2.ZxdgExportedV2 eventSender, string @handle);
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
            switch (opcode)
            {
                case 0:
                    Events?.OnHandle(this, Marshal.PtrToStringAnsi(arguments[0].IntPtr));
                    break;
            }
        }

        private class ProxyFactory : IBindFactory<ZxdgExportedV2>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.XdgForeignUnstableV2.ZxdgExportedV2.WlInterface);
            }

            public ZxdgExportedV2 Create(IntPtr handle, int version)
            {
                return new ZxdgExportedV2(handle, version);
            }
        }

        public static IBindFactory<ZxdgExportedV2> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zxdg_exported_v2";
        public const int InterfaceVersion = 1;

        public ZxdgExportedV2(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    /// <summary>
    /// An xdg_imported object represents an imported reference to surface exportedby some client. A client can use this interface to manipulaterelationships between its own surfaces and the imported surface.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZxdgImportedV2 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZxdgImportedV2()
        {
            NWayland.Protocols.XdgForeignUnstableV2.ZxdgImportedV2.WlInterface = new WlInterface("zxdg_imported_v2", 1, new WlMessage[] {
                new WlMessage("destroy", "", new WlInterface*[] { }),
                new WlMessage("set_parent_of", "o", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSurface.WlInterface) })
            }, new WlMessage[] {
                new WlMessage("destroyed", "", new WlInterface*[] { })
            });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.XdgForeignUnstableV2.ZxdgImportedV2.WlInterface);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
            base.Dispose(true);
        }

        /// <summary>
        /// Set the imported surface as the parent of some surface of the client.The passed surface must be an xdg_toplevel equivalent, otherwise aninvalid_surface protocol error is sent. Calling this function sets upa surface to surface relation with the same stacking and positioningsemantics as xdg_toplevel.set_parent.<br/><br/>
        /// </summary>
        public void SetParentOf(NWayland.Protocols.Wayland.WlSurface @surface)
        {
            if (@surface == null)
                throw new ArgumentNullException("surface");
            WlArgument* __args = stackalloc WlArgument[] {
                @surface
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 1, __args);
        }

        public interface IEvents
        {
            /// <summary>
            /// The imported surface handle has been destroyed and any relationship setup has been invalidated. This may happen for various reasons, forexample if the exported surface or the exported surface handle has beendestroyed, if the handle used for importing was invalid.<br/><br/>
            /// </summary>
            void OnDestroyed(NWayland.Protocols.XdgForeignUnstableV2.ZxdgImportedV2 eventSender);
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
            switch (opcode)
            {
                case 0:
                    Events?.OnDestroyed(this);
                    break;
            }
        }

        /// <summary>
        /// These errors can be emitted in response to invalid xdg_importedrequests.<br/><br/>
        /// </summary>
        public enum ErrorEnum
        {
            /// <summary>
            /// surface is not an xdg_toplevel<br/><br/>
            /// </summary>
            InvalidSurface = 0
        }

        private class ProxyFactory : IBindFactory<ZxdgImportedV2>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.XdgForeignUnstableV2.ZxdgImportedV2.WlInterface);
            }

            public ZxdgImportedV2 Create(IntPtr handle, int version)
            {
                return new ZxdgImportedV2(handle, version);
            }
        }

        public static IBindFactory<ZxdgImportedV2> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zxdg_imported_v2";
        public const int InterfaceVersion = 1;

        public ZxdgImportedV2(IntPtr handle, int version) : base(handle, version)
        {
        }
    }
}
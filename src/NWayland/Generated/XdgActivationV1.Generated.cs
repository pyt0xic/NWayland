using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using NWayland.Protocols.Wayland;
using NWayland.Interop;
#nullable enable
// <auto-generated/>
namespace NWayland.Protocols.XdgActivationV1
{
    /// <summary>
    /// A global interface used for informing the compositor about applicationsbeing activated or started, or for applications to request to beactivated.<br/><br/>
    /// </summary>
    public sealed unsafe partial class XdgActivationV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static XdgActivationV1()
        {
            NWayland.Protocols.XdgActivationV1.XdgActivationV1.WlInterface = new WlInterface("xdg_activation_v1", 1, new WlMessage[] {
                new WlMessage("destroy", "", new WlInterface*[] { }),
                new WlMessage("get_activation_token", "n", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.XdgActivationV1.XdgActivationTokenV1.WlInterface) }),
                new WlMessage("activate", "so", new WlInterface*[] { null, WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSurface.WlInterface) })
            }, new WlMessage[] { });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.XdgActivationV1.XdgActivationV1.WlInterface);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
            base.Dispose(true);
        }

        /// <summary>
        /// Creates an xdg_activation_token_v1 object that will providethe initiating client with a unique token for this activation. Thistoken should be offered to the clients to be activated.<br/><br/>
        /// </summary>
        public NWayland.Protocols.XdgActivationV1.XdgActivationTokenV1 GetActivationToken()
        {
            WlArgument* __args = stackalloc WlArgument[] {
                WlArgument.NewId
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 1, __args, ref NWayland.Protocols.XdgActivationV1.XdgActivationTokenV1.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.XdgActivationV1.XdgActivationTokenV1(__ret, Version);
        }

        /// <summary>
        /// Requests surface activation. It's up to the compositor to displaythis information as desired, for example by placing the surface abovethe rest.<br/><br/>
        /// The compositor may know who requested this by checking the activationtoken and might decide not to follow through with the activation if it'sconsidered unwanted.<br/><br/>
        /// Compositors can ignore unknown activation tokens when an invalidtoken is passed.<br/><br/>
        /// </summary>
        public void Activate(string @token, NWayland.Protocols.Wayland.WlSurface @surface)
        {
            if (@surface == null)
                throw new ArgumentNullException("surface");
            if (@token == null)
                throw new ArgumentNullException("token");
            using var __marshalled__token = new NWaylandMarshalledString(@token);
            WlArgument* __args = stackalloc WlArgument[] {
                __marshalled__token,
                @surface
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 2, __args);
        }

        public interface IEvents
        {
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
        }

        private class ProxyFactory : IBindFactory<XdgActivationV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.XdgActivationV1.XdgActivationV1.WlInterface);
            }

            public XdgActivationV1 Create(IntPtr handle, int version)
            {
                return new XdgActivationV1(handle, version);
            }
        }

        public static IBindFactory<XdgActivationV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "xdg_activation_v1";
        public const int InterfaceVersion = 1;

        public XdgActivationV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    /// <summary>
    /// An object for setting up a token and receiving a token handle that canbe passed as an activation token to another client.<br/><br/>
    /// The object is created using the xdg_activation_v1.get_activation_tokenrequest. This object should then be populated with the app_id, surfaceand serial information and committed. The compositor shall then issue adone event with the token. In case the request's parameters are invalid,the compositor will provide an invalid token.<br/><br/>
    /// </summary>
    public sealed unsafe partial class XdgActivationTokenV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static XdgActivationTokenV1()
        {
            NWayland.Protocols.XdgActivationV1.XdgActivationTokenV1.WlInterface = new WlInterface("xdg_activation_token_v1", 1, new WlMessage[] {
                new WlMessage("set_serial", "uo", new WlInterface*[] { null, WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSeat.WlInterface) }),
                new WlMessage("set_app_id", "s", new WlInterface*[] { null }),
                new WlMessage("set_surface", "o", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSurface.WlInterface) }),
                new WlMessage("commit", "", new WlInterface*[] { }),
                new WlMessage("destroy", "", new WlInterface*[] { })
            }, new WlMessage[] {
                new WlMessage("done", "s", new WlInterface*[] { null })
            });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.XdgActivationV1.XdgActivationTokenV1.WlInterface);
        }

        /// <summary>
        /// Provides information about the seat and serial event that requested thetoken.<br/><br/>
        /// The serial can come from an input or focus event. For instance, if aclick triggers the launch of a third-party client, the launcher clientshould send a set_serial request with the serial and seat from thewl_pointer.button event.<br/><br/>
        /// Some compositors might refuse to activate toplevels when the tokendoesn't have a valid and recent enough event serial.<br/><br/>
        /// Must be sent before commit. This information is optional.<br/><br/>
        /// </summary>
        public void SetSerial(uint @serial, NWayland.Protocols.Wayland.WlSeat @seat)
        {
            if (@seat == null)
                throw new ArgumentNullException("seat");
            WlArgument* __args = stackalloc WlArgument[] {
                @serial,
                @seat
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
        }

        /// <summary>
        /// The requesting client can specify an app_id to associate the tokenbeing created with it.<br/><br/>
        /// Must be sent before commit. This information is optional.<br/><br/>
        /// </summary>
        public void SetAppId(string @appId)
        {
            if (@appId == null)
                throw new ArgumentNullException("appId");
            using var __marshalled__appId = new NWaylandMarshalledString(@appId);
            WlArgument* __args = stackalloc WlArgument[] {
                __marshalled__appId
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 1, __args);
        }

        /// <summary>
        /// This request sets the surface requesting the activation. Note, this isdifferent from the surface that will be activated.<br/><br/>
        /// Some compositors might refuse to activate toplevels when the tokendoesn't have a requesting surface.<br/><br/>
        /// Must be sent before commit. This information is optional.<br/><br/>
        /// </summary>
        public void SetSurface(NWayland.Protocols.Wayland.WlSurface @surface)
        {
            if (@surface == null)
                throw new ArgumentNullException("surface");
            WlArgument* __args = stackalloc WlArgument[] {
                @surface
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 2, __args);
        }

        /// <summary>
        /// Requests an activation token based on the different parameters thathave been offered through set_serial, set_surface and set_app_id.<br/><br/>
        /// </summary>
        public void Commit()
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 3, __args);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 4, __args);
            base.Dispose(true);
        }

        public interface IEvents
        {
            /// <summary>
            /// The 'done' event contains the unique token of this activation requestand notifies that the provider is done.<br/><br/>
            /// </summary>
            void OnDone(NWayland.Protocols.XdgActivationV1.XdgActivationTokenV1 eventSender, string @token);
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
            switch (opcode)
            {
                case 0:
                    Events?.OnDone(this, Marshal.PtrToStringAnsi(arguments[0].IntPtr));
                    break;
            }
        }

        public enum ErrorEnum
        {
            /// <summary>
            /// The token has already been used previously<br/><br/>
            /// </summary>
            AlreadyUsed = 0
        }

        private class ProxyFactory : IBindFactory<XdgActivationTokenV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.XdgActivationV1.XdgActivationTokenV1.WlInterface);
            }

            public XdgActivationTokenV1 Create(IntPtr handle, int version)
            {
                return new XdgActivationTokenV1(handle, version);
            }
        }

        public static IBindFactory<XdgActivationTokenV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "xdg_activation_token_v1";
        public const int InterfaceVersion = 1;

        public XdgActivationTokenV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }
}
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using NWayland.Protocols.Wayland;
using NWayland.Interop;
#nullable enable
// <auto-generated/>
namespace NWayland.Protocols.FractionalScaleV1
{
    /// <summary>
    /// A global interface for requesting surfaces to use fractional scales.<br/><br/>
    /// </summary>
    public sealed unsafe partial class WpFractionalScaleManagerV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static WpFractionalScaleManagerV1()
        {
            NWayland.Protocols.FractionalScaleV1.WpFractionalScaleManagerV1.WlInterface = new WlInterface("wp_fractional_scale_manager_v1", 1, new WlMessage[] {
                new WlMessage("destroy", "", new WlInterface*[] { }),
                new WlMessage("get_fractional_scale", "no", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.FractionalScaleV1.WpFractionalScaleV1.WlInterface), WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSurface.WlInterface) })
            }, new WlMessage[] { });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.FractionalScaleV1.WpFractionalScaleManagerV1.WlInterface);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
            base.Dispose(true);
        }

        /// <summary>
        /// Create an add-on object for the the wl_surface to let the compositorrequest fractional scales. If the given wl_surface already has awp_fractional_scale_v1 object associated, the fractional_scale_existsprotocol error is raised.<br/><br/>
        /// </summary>
        public NWayland.Protocols.FractionalScaleV1.WpFractionalScaleV1 GetFractionalScale(NWayland.Protocols.Wayland.WlSurface @surface)
        {
            if (@surface == null)
                throw new ArgumentNullException("surface");
            WlArgument* __args = stackalloc WlArgument[] {
                WlArgument.NewId,
                @surface
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 1, __args, ref NWayland.Protocols.FractionalScaleV1.WpFractionalScaleV1.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.FractionalScaleV1.WpFractionalScaleV1(__ret, Version);
        }

        public interface IEvents
        {
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
        }

        public enum ErrorEnum
        {
            /// <summary>
            /// the surface already has a fractional_scale object associated<br/><br/>
            /// </summary>
            FractionalScaleExists = 0
        }

        private class ProxyFactory : IBindFactory<WpFractionalScaleManagerV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.FractionalScaleV1.WpFractionalScaleManagerV1.WlInterface);
            }

            public WpFractionalScaleManagerV1 Create(IntPtr handle, int version)
            {
                return new WpFractionalScaleManagerV1(handle, version);
            }
        }

        public static IBindFactory<WpFractionalScaleManagerV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "wp_fractional_scale_manager_v1";
        public const int InterfaceVersion = 1;

        public WpFractionalScaleManagerV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    /// <summary>
    /// An additional interface to a wl_surface object which allows the compositorto inform the client of the preferred scale.<br/><br/>
    /// </summary>
    public sealed unsafe partial class WpFractionalScaleV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static WpFractionalScaleV1()
        {
            NWayland.Protocols.FractionalScaleV1.WpFractionalScaleV1.WlInterface = new WlInterface("wp_fractional_scale_v1", 1, new WlMessage[] {
                new WlMessage("destroy", "", new WlInterface*[] { })
            }, new WlMessage[] {
                new WlMessage("preferred_scale", "u", new WlInterface*[] { null })
            });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.FractionalScaleV1.WpFractionalScaleV1.WlInterface);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
            base.Dispose(true);
        }

        public interface IEvents
        {
            /// <summary>
            /// Notification of a new preferred scale for this surface that thecompositor suggests that the client should use.<br/><br/>
            /// The sent scale is the numerator of a fraction with a denominator of 120.<br/><br/>
            /// </summary>
            void OnPreferredScale(NWayland.Protocols.FractionalScaleV1.WpFractionalScaleV1 eventSender, uint @scale);
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
            switch (opcode)
            {
                case 0:
                    Events?.OnPreferredScale(this, arguments[0].UInt32);
                    break;
            }
        }

        private class ProxyFactory : IBindFactory<WpFractionalScaleV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.FractionalScaleV1.WpFractionalScaleV1.WlInterface);
            }

            public WpFractionalScaleV1 Create(IntPtr handle, int version)
            {
                return new WpFractionalScaleV1(handle, version);
            }
        }

        public static IBindFactory<WpFractionalScaleV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "wp_fractional_scale_v1";
        public const int InterfaceVersion = 1;

        public WpFractionalScaleV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }
}
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using NWayland.Protocols.Wayland;
using NWayland.Interop;
#nullable enable
// <auto-generated/>
namespace NWayland.Protocols.WpPrimarySelectionUnstableV1
{
    /// <summary>
    /// The primary selection device manager is a singleton global object thatprovides access to the primary selection. It allows to createwp_primary_selection_source objects, as well as retrieving the per-seatwp_primary_selection_device objects.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZwpPrimarySelectionDeviceManagerV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZwpPrimarySelectionDeviceManagerV1()
        {
            NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionDeviceManagerV1.WlInterface = new WlInterface("zwp_primary_selection_device_manager_v1", 1, new WlMessage[] {
                new WlMessage("create_source", "n", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionSourceV1.WlInterface) }),
                new WlMessage("get_device", "no", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionDeviceV1.WlInterface), WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSeat.WlInterface) }),
                new WlMessage("destroy", "", new WlInterface*[] { })
            }, new WlMessage[] { });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionDeviceManagerV1.WlInterface);
        }

        /// <summary>
        /// Create a new primary selection source.<br/><br/>
        /// </summary>
        public NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionSourceV1 CreateSource()
        {
            WlArgument* __args = stackalloc WlArgument[] {
                WlArgument.NewId
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 0, __args, ref NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionSourceV1.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionSourceV1(__ret, Version);
        }

        /// <summary>
        /// Create a new data device for a given seat.<br/><br/>
        /// </summary>
        public NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionDeviceV1 GetDevice(NWayland.Protocols.Wayland.WlSeat @seat)
        {
            if (@seat == null)
                throw new ArgumentNullException("seat");
            WlArgument* __args = stackalloc WlArgument[] {
                WlArgument.NewId,
                @seat
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 1, __args, ref NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionDeviceV1.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionDeviceV1(__ret, Version);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 2, __args);
            base.Dispose(true);
        }

        public interface IEvents
        {
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
        }

        private class ProxyFactory : IBindFactory<ZwpPrimarySelectionDeviceManagerV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionDeviceManagerV1.WlInterface);
            }

            public ZwpPrimarySelectionDeviceManagerV1 Create(IntPtr handle, int version)
            {
                return new ZwpPrimarySelectionDeviceManagerV1(handle, version);
            }
        }

        public static IBindFactory<ZwpPrimarySelectionDeviceManagerV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zwp_primary_selection_device_manager_v1";
        public const int InterfaceVersion = 1;

        public ZwpPrimarySelectionDeviceManagerV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    public sealed unsafe partial class ZwpPrimarySelectionDeviceV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZwpPrimarySelectionDeviceV1()
        {
            NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionDeviceV1.WlInterface = new WlInterface("zwp_primary_selection_device_v1", 1, new WlMessage[] {
                new WlMessage("set_selection", "?ou", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionSourceV1.WlInterface), null }),
                new WlMessage("destroy", "", new WlInterface*[] { })
            }, new WlMessage[] {
                new WlMessage("data_offer", "n", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionOfferV1.WlInterface) }),
                new WlMessage("selection", "?o", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionOfferV1.WlInterface) })
            });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionDeviceV1.WlInterface);
        }

        /// <summary>
        /// Replaces the current selection. The previous owner of the primaryselection will receive a wp_primary_selection_source.cancelled event.<br/><br/>
        /// To unset the selection, set the source to NULL.<br/><br/>
        /// </summary>
        public void SetSelection(NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionSourceV1? @source, uint @serial)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                @source,
                @serial
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 1, __args);
            base.Dispose(true);
        }

        public interface IEvents
        {
            /// <summary>
            /// Introduces a new wp_primary_selection_offer object that may be usedto receive the current primary selection. Immediately following thisevent, the new wp_primary_selection_offer object will sendwp_primary_selection_offer.offer events to describe the offered mimetypes.<br/><br/>
            /// </summary>
            void OnDataOffer(NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionDeviceV1 eventSender, ZwpPrimarySelectionOfferV1 @offer);

            /// <summary>
            /// The wp_primary_selection_device.selection event is sent to notify theclient of a new primary selection. This event is sent after thewp_primary_selection.data_offer event introducing this object, and afterthe offer has announced its mimetypes throughwp_primary_selection_offer.offer.<br/><br/>
            /// The data_offer is valid until a new offer or NULL is receivedor until the client loses keyboard focus. The client must destroy theprevious selection data_offer, if any, upon receiving this event.<br/><br/>
            /// </summary>
            void OnSelection(NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionDeviceV1 eventSender, NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionOfferV1? @id);
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
            switch (opcode)
            {
                case 0:
                    Events?.OnDataOffer(this, new ZwpPrimarySelectionOfferV1(arguments[0].IntPtr, Version));
                    break;
                case 1:
                    Events?.OnSelection(this, WlProxy.FromNative<NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionOfferV1>(arguments[0].IntPtr));
                    break;
            }
        }

        private class ProxyFactory : IBindFactory<ZwpPrimarySelectionDeviceV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionDeviceV1.WlInterface);
            }

            public ZwpPrimarySelectionDeviceV1 Create(IntPtr handle, int version)
            {
                return new ZwpPrimarySelectionDeviceV1(handle, version);
            }
        }

        public static IBindFactory<ZwpPrimarySelectionDeviceV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zwp_primary_selection_device_v1";
        public const int InterfaceVersion = 1;

        public ZwpPrimarySelectionDeviceV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    /// <summary>
    /// A wp_primary_selection_offer represents an offer to transfer the contentsof the primary selection clipboard to the client. Similar towl_data_offer, the offer also describes the mime types that the data canbe converted to and provides the mechanisms for transferring the datadirectly to the client.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZwpPrimarySelectionOfferV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZwpPrimarySelectionOfferV1()
        {
            NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionOfferV1.WlInterface = new WlInterface("zwp_primary_selection_offer_v1", 1, new WlMessage[] {
                new WlMessage("receive", "sh", new WlInterface*[] { null, null }),
                new WlMessage("destroy", "", new WlInterface*[] { })
            }, new WlMessage[] {
                new WlMessage("offer", "s", new WlInterface*[] { null })
            });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionOfferV1.WlInterface);
        }

        /// <summary>
        /// To transfer the contents of the primary selection clipboard, the clientissues this request and indicates the mime type that it wants toreceive. The transfer happens through the passed file descriptor(typically created with the pipe system call). The source client writesthe data in the mime type representation requested and then closes thefile descriptor.<br/><br/>
        /// The receiving client reads from the read end of the pipe until EOF andcloses its end, at which point the transfer is complete.<br/><br/>
        /// </summary>
        public void Receive(string @mimeType, int @fd)
        {
            if (@mimeType == null)
                throw new ArgumentNullException("mimeType");
            using var __marshalled__mimeType = new NWaylandMarshalledString(@mimeType);
            WlArgument* __args = stackalloc WlArgument[] {
                __marshalled__mimeType,
                @fd
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 1, __args);
            base.Dispose(true);
        }

        public interface IEvents
        {
            /// <summary>
            /// Sent immediately after creating announcing thewp_primary_selection_offer throughwp_primary_selection_device.data_offer. One event is sent per offeredmime type.<br/><br/>
            /// </summary>
            void OnOffer(NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionOfferV1 eventSender, string @mimeType);
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
            switch (opcode)
            {
                case 0:
                    Events?.OnOffer(this, Marshal.PtrToStringAnsi(arguments[0].IntPtr));
                    break;
            }
        }

        private class ProxyFactory : IBindFactory<ZwpPrimarySelectionOfferV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionOfferV1.WlInterface);
            }

            public ZwpPrimarySelectionOfferV1 Create(IntPtr handle, int version)
            {
                return new ZwpPrimarySelectionOfferV1(handle, version);
            }
        }

        public static IBindFactory<ZwpPrimarySelectionOfferV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zwp_primary_selection_offer_v1";
        public const int InterfaceVersion = 1;

        public ZwpPrimarySelectionOfferV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    /// <summary>
    /// The source side of a wp_primary_selection_offer, it provides a way todescribe the offered data and respond to requests to transfer therequested contents of the primary selection clipboard.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZwpPrimarySelectionSourceV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZwpPrimarySelectionSourceV1()
        {
            NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionSourceV1.WlInterface = new WlInterface("zwp_primary_selection_source_v1", 1, new WlMessage[] {
                new WlMessage("offer", "s", new WlInterface*[] { null }),
                new WlMessage("destroy", "", new WlInterface*[] { })
            }, new WlMessage[] {
                new WlMessage("send", "sh", new WlInterface*[] { null, null }),
                new WlMessage("cancelled", "", new WlInterface*[] { })
            });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionSourceV1.WlInterface);
        }

        /// <summary>
        /// This request adds a mime type to the set of mime types advertised totargets. Can be called several times to offer multiple types.<br/><br/>
        /// </summary>
        public void Offer(string @mimeType)
        {
            if (@mimeType == null)
                throw new ArgumentNullException("mimeType");
            using var __marshalled__mimeType = new NWaylandMarshalledString(@mimeType);
            WlArgument* __args = stackalloc WlArgument[] {
                __marshalled__mimeType
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 1, __args);
            base.Dispose(true);
        }

        public interface IEvents
        {
            /// <summary>
            /// Request for the current primary selection contents from the client.Send the specified mime type over the passed file descriptor, thenclose it.<br/><br/>
            /// </summary>
            void OnSend(NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionSourceV1 eventSender, string @mimeType, int @fd);

            /// <summary>
            /// This primary selection source is no longer valid. The client shouldclean up and destroy this primary selection source.<br/><br/>
            /// </summary>
            void OnCancelled(NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionSourceV1 eventSender);
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
            switch (opcode)
            {
                case 0:
                    Events?.OnSend(this, Marshal.PtrToStringAnsi(arguments[0].IntPtr), arguments[1].Int32);
                    break;
                case 1:
                    Events?.OnCancelled(this);
                    break;
            }
        }

        private class ProxyFactory : IBindFactory<ZwpPrimarySelectionSourceV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.WpPrimarySelectionUnstableV1.ZwpPrimarySelectionSourceV1.WlInterface);
            }

            public ZwpPrimarySelectionSourceV1 Create(IntPtr handle, int version)
            {
                return new ZwpPrimarySelectionSourceV1(handle, version);
            }
        }

        public static IBindFactory<ZwpPrimarySelectionSourceV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zwp_primary_selection_source_v1";
        public const int InterfaceVersion = 1;

        public ZwpPrimarySelectionSourceV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }
}
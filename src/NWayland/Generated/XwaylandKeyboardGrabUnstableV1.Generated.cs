using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using NWayland.Protocols.Wayland;
using NWayland.Interop;
#nullable enable
// <auto-generated/>
namespace NWayland.Protocols.XwaylandKeyboardGrabUnstableV1
{
    /// <summary>
    /// A global interface used for grabbing the keyboard.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZwpXwaylandKeyboardGrabManagerV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZwpXwaylandKeyboardGrabManagerV1()
        {
            NWayland.Protocols.XwaylandKeyboardGrabUnstableV1.ZwpXwaylandKeyboardGrabManagerV1.WlInterface = new WlInterface("zwp_xwayland_keyboard_grab_manager_v1", 1, new WlMessage[] {
                new WlMessage("destroy", "", new WlInterface*[] { }),
                new WlMessage("grab_keyboard", "noo", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.XwaylandKeyboardGrabUnstableV1.ZwpXwaylandKeyboardGrabV1.WlInterface), WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSurface.WlInterface), WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSeat.WlInterface) })
            }, new WlMessage[] { });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.XwaylandKeyboardGrabUnstableV1.ZwpXwaylandKeyboardGrabManagerV1.WlInterface);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
            base.Dispose(true);
        }

        /// <summary>
        /// The grab_keyboard request asks for a grab of the keyboard, forcingthe keyboard focus for the given seat upon the given surface.<br/><br/>
        /// The protocol provides no guarantee that the grab is ever satisfied,and does not require the compositor to send an error if the grabcannot ever be satisfied. It is thus possible to request a keyboardgrab that will never be effective.<br/><br/>
        /// The protocol:<br/><br/>
        /// * does not guarantee that the grab itself is applied for a surface,the grab request may be silently ignored by the compositor,* does not guarantee that any events are sent to this client evenif the grab is applied to a surface,* does not guarantee that events sent to this client are exhaustive,a compositor may filter some events for its own consumption,* does not guarantee that events sent to this client are continuous,a compositor may change and reroute keyboard events while the grabis nominally active.<br/><br/>
        /// </summary>
        public NWayland.Protocols.XwaylandKeyboardGrabUnstableV1.ZwpXwaylandKeyboardGrabV1 GrabKeyboard(NWayland.Protocols.Wayland.WlSurface @surface, NWayland.Protocols.Wayland.WlSeat @seat)
        {
            if (@seat == null)
                throw new ArgumentNullException("seat");
            if (@surface == null)
                throw new ArgumentNullException("surface");
            WlArgument* __args = stackalloc WlArgument[] {
                WlArgument.NewId,
                @surface,
                @seat
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 1, __args, ref NWayland.Protocols.XwaylandKeyboardGrabUnstableV1.ZwpXwaylandKeyboardGrabV1.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.XwaylandKeyboardGrabUnstableV1.ZwpXwaylandKeyboardGrabV1(__ret, Version);
        }

        public interface IEvents
        {
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
        }

        private class ProxyFactory : IBindFactory<ZwpXwaylandKeyboardGrabManagerV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.XwaylandKeyboardGrabUnstableV1.ZwpXwaylandKeyboardGrabManagerV1.WlInterface);
            }

            public ZwpXwaylandKeyboardGrabManagerV1 Create(IntPtr handle, int version)
            {
                return new ZwpXwaylandKeyboardGrabManagerV1(handle, version);
            }
        }

        public static IBindFactory<ZwpXwaylandKeyboardGrabManagerV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zwp_xwayland_keyboard_grab_manager_v1";
        public const int InterfaceVersion = 1;

        public ZwpXwaylandKeyboardGrabManagerV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    /// <summary>
    /// A global interface used for grabbing the keyboard.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZwpXwaylandKeyboardGrabV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZwpXwaylandKeyboardGrabV1()
        {
            NWayland.Protocols.XwaylandKeyboardGrabUnstableV1.ZwpXwaylandKeyboardGrabV1.WlInterface = new WlInterface("zwp_xwayland_keyboard_grab_v1", 1, new WlMessage[] {
                new WlMessage("destroy", "", new WlInterface*[] { })
            }, new WlMessage[] { });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.XwaylandKeyboardGrabUnstableV1.ZwpXwaylandKeyboardGrabV1.WlInterface);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
            base.Dispose(true);
        }

        public interface IEvents
        {
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
        }

        private class ProxyFactory : IBindFactory<ZwpXwaylandKeyboardGrabV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.XwaylandKeyboardGrabUnstableV1.ZwpXwaylandKeyboardGrabV1.WlInterface);
            }

            public ZwpXwaylandKeyboardGrabV1 Create(IntPtr handle, int version)
            {
                return new ZwpXwaylandKeyboardGrabV1(handle, version);
            }
        }

        public static IBindFactory<ZwpXwaylandKeyboardGrabV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zwp_xwayland_keyboard_grab_v1";
        public const int InterfaceVersion = 1;

        public ZwpXwaylandKeyboardGrabV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }
}
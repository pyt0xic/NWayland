using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using NWayland.Protocols.Wayland;
using NWayland.Interop;
#nullable enable
// <auto-generated/>
namespace NWayland.Protocols.RelativePointerUnstableV1
{
    /// <summary>
    /// A global interface used for getting the relative pointer object for agiven pointer.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZwpRelativePointerManagerV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZwpRelativePointerManagerV1()
        {
            NWayland.Protocols.RelativePointerUnstableV1.ZwpRelativePointerManagerV1.WlInterface = new WlInterface("zwp_relative_pointer_manager_v1", 1, new WlMessage[] {
                new WlMessage("destroy", "", new WlInterface*[] { }),
                new WlMessage("get_relative_pointer", "no", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.RelativePointerUnstableV1.ZwpRelativePointerV1.WlInterface), WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlPointer.WlInterface) })
            }, new WlMessage[] { });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.RelativePointerUnstableV1.ZwpRelativePointerManagerV1.WlInterface);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
            base.Dispose(true);
        }

        /// <summary>
        /// Create a relative pointer interface given a wl_pointer object. See thewp_relative_pointer interface for more details.<br/><br/>
        /// </summary>
        public NWayland.Protocols.RelativePointerUnstableV1.ZwpRelativePointerV1 GetRelativePointer(NWayland.Protocols.Wayland.WlPointer @pointer)
        {
            if (@pointer == null)
                throw new ArgumentNullException("pointer");
            WlArgument* __args = stackalloc WlArgument[] {
                WlArgument.NewId,
                @pointer
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 1, __args, ref NWayland.Protocols.RelativePointerUnstableV1.ZwpRelativePointerV1.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.RelativePointerUnstableV1.ZwpRelativePointerV1(__ret, Version);
        }

        public interface IEvents
        {
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
        }

        private class ProxyFactory : IBindFactory<ZwpRelativePointerManagerV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.RelativePointerUnstableV1.ZwpRelativePointerManagerV1.WlInterface);
            }

            public ZwpRelativePointerManagerV1 Create(IntPtr handle, int version)
            {
                return new ZwpRelativePointerManagerV1(handle, version);
            }
        }

        public static IBindFactory<ZwpRelativePointerManagerV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zwp_relative_pointer_manager_v1";
        public const int InterfaceVersion = 1;

        public ZwpRelativePointerManagerV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    /// <summary>
    /// A wp_relative_pointer object is an extension to the wl_pointer interfaceused for emitting relative pointer events. It shares the same focus aswl_pointer objects of the same seat and will only emit events when it hasfocus.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZwpRelativePointerV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZwpRelativePointerV1()
        {
            NWayland.Protocols.RelativePointerUnstableV1.ZwpRelativePointerV1.WlInterface = new WlInterface("zwp_relative_pointer_v1", 1, new WlMessage[] {
                new WlMessage("destroy", "", new WlInterface*[] { })
            }, new WlMessage[] {
                new WlMessage("relative_motion", "uuffff", new WlInterface*[] { null, null, null, null, null, null })
            });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.RelativePointerUnstableV1.ZwpRelativePointerV1.WlInterface);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
            base.Dispose(true);
        }

        public interface IEvents
        {
            /// <summary>
            /// Relative x/y pointer motion from the pointer of the seat associated withthis object.<br/><br/>
            /// A relative motion is in the same dimension as regular wl_pointer motionevents, except they do not represent an absolute position. For example,moving a pointer from (x, y) to (x', y') would have the equivalentrelative motion (x' - x, y' - y). If a pointer motion caused theabsolute pointer position to be clipped by for example the edge of themonitor, the relative motion is unaffected by the clipping and willrepresent the unclipped motion.<br/><br/>
            /// This event also contains non-accelerated motion deltas. Thenon-accelerated delta is, when applicable, the regular pointer motiondelta as it was before having applied motion acceleration and othertransformations such as normalization.<br/><br/>
            /// Note that the non-accelerated delta does not represent 'raw' events asthey were read from some device. Pointer motion acceleration is device-and configuration-specific and non-accelerated deltas and accelerateddeltas may have the same value on some devices.<br/><br/>
            /// Relative motions are not coupled to wl_pointer.motion events, and can besent in combination with such events, but also independently. There mayalso be scenarios where wl_pointer.motion is sent, but there is norelative motion. The order of an absolute and relative motion eventoriginating from the same physical motion is not guaranteed.<br/><br/>
            /// If the client needs button events or focus state, it can receive themfrom a wl_pointer object of the same seat that the wp_relative_pointerobject is associated with.<br/><br/>
            /// </summary>
            void OnRelativeMotion(NWayland.Protocols.RelativePointerUnstableV1.ZwpRelativePointerV1 eventSender, uint @utimeHi, uint @utimeLo, WlFixed @dx, WlFixed @dy, WlFixed @dxUnaccel, WlFixed @dyUnaccel);
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
            switch (opcode)
            {
                case 0:
                    Events?.OnRelativeMotion(this, arguments[0].UInt32, arguments[1].UInt32, arguments[2].WlFixed, arguments[3].WlFixed, arguments[4].WlFixed, arguments[5].WlFixed);
                    break;
            }
        }

        private class ProxyFactory : IBindFactory<ZwpRelativePointerV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.RelativePointerUnstableV1.ZwpRelativePointerV1.WlInterface);
            }

            public ZwpRelativePointerV1 Create(IntPtr handle, int version)
            {
                return new ZwpRelativePointerV1(handle, version);
            }
        }

        public static IBindFactory<ZwpRelativePointerV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zwp_relative_pointer_v1";
        public const int InterfaceVersion = 1;

        public ZwpRelativePointerV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }
}
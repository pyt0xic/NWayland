using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using NWayland.Protocols.Wayland;
using NWayland.Interop;
#nullable enable
// <auto-generated/>
namespace NWayland.Protocols.InputTimestampsUnstableV1
{
    /// <summary>
    /// A global interface used for requesting high-resolution timestampsfor input events.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZwpInputTimestampsManagerV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZwpInputTimestampsManagerV1()
        {
            NWayland.Protocols.InputTimestampsUnstableV1.ZwpInputTimestampsManagerV1.WlInterface = new WlInterface("zwp_input_timestamps_manager_v1", 1, new WlMessage[] {
                new WlMessage("destroy", "", new WlInterface*[] { }),
                new WlMessage("get_keyboard_timestamps", "no", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.InputTimestampsUnstableV1.ZwpInputTimestampsV1.WlInterface), WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlKeyboard.WlInterface) }),
                new WlMessage("get_pointer_timestamps", "no", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.InputTimestampsUnstableV1.ZwpInputTimestampsV1.WlInterface), WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlPointer.WlInterface) }),
                new WlMessage("get_touch_timestamps", "no", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.InputTimestampsUnstableV1.ZwpInputTimestampsV1.WlInterface), WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlTouch.WlInterface) })
            }, new WlMessage[] { });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.InputTimestampsUnstableV1.ZwpInputTimestampsManagerV1.WlInterface);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
            base.Dispose(true);
        }

        /// <summary>
        /// Creates a new input timestamps object that represents a subscriptionto high-resolution timestamp events for all wl_keyboard events thatcarry a timestamp.<br/><br/>
        /// If the associated wl_keyboard object is invalidated, either throughclient action (e.g. release) or server-side changes, the inputtimestamps object becomes inert and the client should destroy itby calling zwp_input_timestamps_v1.destroy.<br/><br/>
        /// </summary>
        public NWayland.Protocols.InputTimestampsUnstableV1.ZwpInputTimestampsV1 GetKeyboardTimestamps(NWayland.Protocols.Wayland.WlKeyboard @keyboard)
        {
            if (@keyboard == null)
                throw new ArgumentNullException("keyboard");
            WlArgument* __args = stackalloc WlArgument[] {
                WlArgument.NewId,
                @keyboard
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 1, __args, ref NWayland.Protocols.InputTimestampsUnstableV1.ZwpInputTimestampsV1.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.InputTimestampsUnstableV1.ZwpInputTimestampsV1(__ret, Version);
        }

        /// <summary>
        /// Creates a new input timestamps object that represents a subscriptionto high-resolution timestamp events for all wl_pointer events thatcarry a timestamp.<br/><br/>
        /// If the associated wl_pointer object is invalidated, either throughclient action (e.g. release) or server-side changes, the inputtimestamps object becomes inert and the client should destroy itby calling zwp_input_timestamps_v1.destroy.<br/><br/>
        /// </summary>
        public NWayland.Protocols.InputTimestampsUnstableV1.ZwpInputTimestampsV1 GetPointerTimestamps(NWayland.Protocols.Wayland.WlPointer @pointer)
        {
            if (@pointer == null)
                throw new ArgumentNullException("pointer");
            WlArgument* __args = stackalloc WlArgument[] {
                WlArgument.NewId,
                @pointer
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 2, __args, ref NWayland.Protocols.InputTimestampsUnstableV1.ZwpInputTimestampsV1.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.InputTimestampsUnstableV1.ZwpInputTimestampsV1(__ret, Version);
        }

        /// <summary>
        /// Creates a new input timestamps object that represents a subscriptionto high-resolution timestamp events for all wl_touch events thatcarry a timestamp.<br/><br/>
        /// If the associated wl_touch object becomes invalid, either throughclient action (e.g. release) or server-side changes, the inputtimestamps object becomes inert and the client should destroy itby calling zwp_input_timestamps_v1.destroy.<br/><br/>
        /// </summary>
        public NWayland.Protocols.InputTimestampsUnstableV1.ZwpInputTimestampsV1 GetTouchTimestamps(NWayland.Protocols.Wayland.WlTouch @touch)
        {
            if (@touch == null)
                throw new ArgumentNullException("touch");
            WlArgument* __args = stackalloc WlArgument[] {
                WlArgument.NewId,
                @touch
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 3, __args, ref NWayland.Protocols.InputTimestampsUnstableV1.ZwpInputTimestampsV1.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.InputTimestampsUnstableV1.ZwpInputTimestampsV1(__ret, Version);
        }

        public interface IEvents
        {
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
        }

        private class ProxyFactory : IBindFactory<ZwpInputTimestampsManagerV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.InputTimestampsUnstableV1.ZwpInputTimestampsManagerV1.WlInterface);
            }

            public ZwpInputTimestampsManagerV1 Create(IntPtr handle, int version)
            {
                return new ZwpInputTimestampsManagerV1(handle, version);
            }
        }

        public static IBindFactory<ZwpInputTimestampsManagerV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zwp_input_timestamps_manager_v1";
        public const int InterfaceVersion = 1;

        public ZwpInputTimestampsManagerV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    /// <summary>
    /// Provides high-resolution timestamp events for a set of subscribed inputevents. The set of subscribed input events is determined by thezwp_input_timestamps_manager_v1 request used to create this object.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZwpInputTimestampsV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZwpInputTimestampsV1()
        {
            NWayland.Protocols.InputTimestampsUnstableV1.ZwpInputTimestampsV1.WlInterface = new WlInterface("zwp_input_timestamps_v1", 1, new WlMessage[] {
                new WlMessage("destroy", "", new WlInterface*[] { })
            }, new WlMessage[] {
                new WlMessage("timestamp", "uuu", new WlInterface*[] { null, null, null })
            });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.InputTimestampsUnstableV1.ZwpInputTimestampsV1.WlInterface);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
            base.Dispose(true);
        }

        public interface IEvents
        {
            /// <summary>
            /// The timestamp event is associated with the first subsequent input eventcarrying a timestamp which belongs to the set of input events thisobject is subscribed to.<br/><br/>
            /// The timestamp provided by this event is a high-resolution version ofthe timestamp argument of the associated input event. The providedtimestamp is in the same clock domain and is at least as accurate asthe associated input event timestamp.<br/><br/>
            /// The timestamp is expressed as tv_sec_hi, tv_sec_lo, tv_nsec triples,each component being an unsigned 32-bit value. Whole seconds are intv_sec which is a 64-bit value combined from tv_sec_hi and tv_sec_lo,and the additional fractional part in tv_nsec as nanoseconds. Hence,for valid timestamps tv_nsec must be in [0, 999999999].<br/><br/>
            /// </summary>
            void OnTimestamp(NWayland.Protocols.InputTimestampsUnstableV1.ZwpInputTimestampsV1 eventSender, uint @tvSecHi, uint @tvSecLo, uint @tvNsec);
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
            switch (opcode)
            {
                case 0:
                    Events?.OnTimestamp(this, arguments[0].UInt32, arguments[1].UInt32, arguments[2].UInt32);
                    break;
            }
        }

        private class ProxyFactory : IBindFactory<ZwpInputTimestampsV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.InputTimestampsUnstableV1.ZwpInputTimestampsV1.WlInterface);
            }

            public ZwpInputTimestampsV1 Create(IntPtr handle, int version)
            {
                return new ZwpInputTimestampsV1(handle, version);
            }
        }

        public static IBindFactory<ZwpInputTimestampsV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zwp_input_timestamps_v1";
        public const int InterfaceVersion = 1;

        public ZwpInputTimestampsV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }
}
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using NWayland.Protocols.Wayland;
using NWayland.Interop;
#nullable enable
// <auto-generated/>
namespace NWayland.Protocols.TabletUnstableV1
{
    /// <summary>
    /// An object that provides access to the graphics tablets available on thissystem. All tablets are associated with a seat, to get access to theactual tablets, use wp_tablet_manager.get_tablet_seat.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZwpTabletManagerV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZwpTabletManagerV1()
        {
            NWayland.Protocols.TabletUnstableV1.ZwpTabletManagerV1.WlInterface = new WlInterface("zwp_tablet_manager_v1", 1, new WlMessage[] {
                new WlMessage("get_tablet_seat", "no", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.TabletUnstableV1.ZwpTabletSeatV1.WlInterface), WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSeat.WlInterface) }),
                new WlMessage("destroy", "", new WlInterface*[] { })
            }, new WlMessage[] { });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.TabletUnstableV1.ZwpTabletManagerV1.WlInterface);
        }

        /// <summary>
        /// Get the wp_tablet_seat object for the given seat. This objectprovides access to all graphics tablets in this seat.<br/><br/>
        /// </summary>
        public NWayland.Protocols.TabletUnstableV1.ZwpTabletSeatV1 GetTabletSeat(NWayland.Protocols.Wayland.WlSeat @seat)
        {
            if (@seat == null)
                throw new ArgumentNullException("seat");
            WlArgument* __args = stackalloc WlArgument[] {
                WlArgument.NewId,
                @seat
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 0, __args, ref NWayland.Protocols.TabletUnstableV1.ZwpTabletSeatV1.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.TabletUnstableV1.ZwpTabletSeatV1(__ret, Version);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 1, __args);
            base.Dispose(true);
        }

        public interface IEvents
        {
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
        }

        private class ProxyFactory : IBindFactory<ZwpTabletManagerV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.TabletUnstableV1.ZwpTabletManagerV1.WlInterface);
            }

            public ZwpTabletManagerV1 Create(IntPtr handle, int version)
            {
                return new ZwpTabletManagerV1(handle, version);
            }
        }

        public static IBindFactory<ZwpTabletManagerV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zwp_tablet_manager_v1";
        public const int InterfaceVersion = 1;

        public ZwpTabletManagerV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    /// <summary>
    /// An object that provides access to the graphics tablets available on thisseat. After binding to this interface, the compositor sends a set ofwp_tablet_seat.tablet_added and wp_tablet_seat.tool_added events.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZwpTabletSeatV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZwpTabletSeatV1()
        {
            NWayland.Protocols.TabletUnstableV1.ZwpTabletSeatV1.WlInterface = new WlInterface("zwp_tablet_seat_v1", 1, new WlMessage[] {
                new WlMessage("destroy", "", new WlInterface*[] { })
            }, new WlMessage[] {
                new WlMessage("tablet_added", "n", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.TabletUnstableV1.ZwpTabletV1.WlInterface) }),
                new WlMessage("tool_added", "n", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.TabletUnstableV1.ZwpTabletToolV1.WlInterface) })
            });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.TabletUnstableV1.ZwpTabletSeatV1.WlInterface);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
            base.Dispose(true);
        }

        public interface IEvents
        {
            /// <summary>
            /// This event is sent whenever a new tablet becomes available on thisseat. This event only provides the object id of the tablet, anystatic information about the tablet (device name, vid/pid, etc.) issent through the wp_tablet interface.<br/><br/>
            /// </summary>
            void OnTabletAdded(NWayland.Protocols.TabletUnstableV1.ZwpTabletSeatV1 eventSender, ZwpTabletV1 @id);

            /// <summary>
            /// This event is sent whenever a tool that has not previously been usedwith a tablet comes into use. This event only provides the object idof the tool; any static information about the tool (capabilities,type, etc.) is sent through the wp_tablet_tool interface.<br/><br/>
            /// </summary>
            void OnToolAdded(NWayland.Protocols.TabletUnstableV1.ZwpTabletSeatV1 eventSender, ZwpTabletToolV1 @id);
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
            switch (opcode)
            {
                case 0:
                    Events?.OnTabletAdded(this, new ZwpTabletV1(arguments[0].IntPtr, Version));
                    break;
                case 1:
                    Events?.OnToolAdded(this, new ZwpTabletToolV1(arguments[0].IntPtr, Version));
                    break;
            }
        }

        private class ProxyFactory : IBindFactory<ZwpTabletSeatV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.TabletUnstableV1.ZwpTabletSeatV1.WlInterface);
            }

            public ZwpTabletSeatV1 Create(IntPtr handle, int version)
            {
                return new ZwpTabletSeatV1(handle, version);
            }
        }

        public static IBindFactory<ZwpTabletSeatV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zwp_tablet_seat_v1";
        public const int InterfaceVersion = 1;

        public ZwpTabletSeatV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    /// <summary>
    /// An object that represents a physical tool that has been, or iscurrently in use with a tablet in this seat. Each wp_tablet_toolobject stays valid until the client destroys it; the compositorreuses the wp_tablet_tool object to indicate that the object'srespective physical tool has come into proximity of a tablet again.<br/><br/>
    /// A wp_tablet_tool object's relation to a physical tool depends on thetablet's ability to report serial numbers. If the tablet supportsthis capability, then the object represents a specific physical tooland can be identified even when used on multiple tablets.<br/><br/>
    /// A tablet tool has a number of static characteristics, e.g. tool type,hardware_serial and capabilities. These capabilities are sent in anevent sequence after the wp_tablet_seat.tool_added event before anyactual events from this tool. This initial event sequence isterminated by a wp_tablet_tool.done event.<br/><br/>
    /// Tablet tool events are grouped by wp_tablet_tool.frame events.Any events received before a wp_tablet_tool.frame event should beconsidered part of the same hardware state change.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZwpTabletToolV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZwpTabletToolV1()
        {
            NWayland.Protocols.TabletUnstableV1.ZwpTabletToolV1.WlInterface = new WlInterface("zwp_tablet_tool_v1", 1, new WlMessage[] {
                new WlMessage("set_cursor", "u?oii", new WlInterface*[] { null, WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSurface.WlInterface), null, null }),
                new WlMessage("destroy", "", new WlInterface*[] { })
            }, new WlMessage[] {
                new WlMessage("type", "u", new WlInterface*[] { null }),
                new WlMessage("hardware_serial", "uu", new WlInterface*[] { null, null }),
                new WlMessage("hardware_id_wacom", "uu", new WlInterface*[] { null, null }),
                new WlMessage("capability", "u", new WlInterface*[] { null }),
                new WlMessage("done", "", new WlInterface*[] { }),
                new WlMessage("removed", "", new WlInterface*[] { }),
                new WlMessage("proximity_in", "uoo", new WlInterface*[] { null, WlInterface.GeneratorAddressOf(ref NWayland.Protocols.TabletUnstableV1.ZwpTabletV1.WlInterface), WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSurface.WlInterface) }),
                new WlMessage("proximity_out", "", new WlInterface*[] { }),
                new WlMessage("down", "u", new WlInterface*[] { null }),
                new WlMessage("up", "", new WlInterface*[] { }),
                new WlMessage("motion", "ff", new WlInterface*[] { null, null }),
                new WlMessage("pressure", "u", new WlInterface*[] { null }),
                new WlMessage("distance", "u", new WlInterface*[] { null }),
                new WlMessage("tilt", "ii", new WlInterface*[] { null, null }),
                new WlMessage("rotation", "i", new WlInterface*[] { null }),
                new WlMessage("slider", "i", new WlInterface*[] { null }),
                new WlMessage("wheel", "ii", new WlInterface*[] { null, null }),
                new WlMessage("button", "uuu", new WlInterface*[] { null, null, null }),
                new WlMessage("frame", "u", new WlInterface*[] { null })
            });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.TabletUnstableV1.ZwpTabletToolV1.WlInterface);
        }

        /// <summary>
        /// Sets the surface of the cursor used for this tool on the giventablet. This request only takes effect if the tool is in proximityof one of the requesting client's surfaces or the surface parameteris the current pointer surface. If there was a previous surface setwith this request it is replaced. If surface is NULL, the cursorimage is hidden.<br/><br/>
        /// The parameters hotspot_x and hotspot_y define the position of thepointer surface relative to the pointer location. Its top-left corneris always at (x, y) - (hotspot_x, hotspot_y), where (x, y) are thecoordinates of the pointer location, in surface-local coordinates.<br/><br/>
        /// On surface.attach requests to the pointer surface, hotspot_x andhotspot_y are decremented by the x and y parameters passed to therequest. Attach must be confirmed by wl_surface.commit as usual.<br/><br/>
        /// The hotspot can also be updated by passing the currently set pointersurface to this request with new values for hotspot_x and hotspot_y.<br/><br/>
        /// The current and pending input regions of the wl_surface are cleared,and wl_surface.set_input_region is ignored until the wl_surface is nolonger used as the cursor. When the use as a cursor ends, the currentand pending input regions become undefined, and the wl_surface isunmapped.<br/><br/>
        /// This request gives the surface the role of a cursor. The roleassigned by this request is the same as assigned bywl_pointer.set_cursor meaning the same surface can beused both as a wl_pointer cursor and a wp_tablet cursor. If thesurface already has another role, it raises a protocol error.The surface may be used on multiple tablets and across multipleseats.<br/><br/>
        /// </summary>
        public void SetCursor(uint @serial, NWayland.Protocols.Wayland.WlSurface? @surface, int @hotspotX, int @hotspotY)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                @serial,
                @surface,
                @hotspotX,
                @hotspotY
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 1, __args);
            base.Dispose(true);
        }

        public interface IEvents
        {
            /// <summary>
            /// The tool type is the high-level type of the tool and usually decidesthe interaction expected from this tool.<br/><br/>
            /// This event is sent in the initial burst of events before thewp_tablet_tool.done event.<br/><br/>
            /// </summary>
            void OnType(NWayland.Protocols.TabletUnstableV1.ZwpTabletToolV1 eventSender, TypeEnum @toolType);

            /// <summary>
            /// If the physical tool can be identified by a unique 64-bit serialnumber, this event notifies the client of this serial number.<br/><br/>
            /// If multiple tablets are available in the same seat and the tool isuniquely identifiable by the serial number, that tool may movebetween tablets.<br/><br/>
            /// Otherwise, if the tool has no serial number and this event ismissing, the tool is tied to the tablet it first comes intoproximity with. Even if the physical tool is used on multipletablets, separate wp_tablet_tool objects will be created, one pertablet.<br/><br/>
            /// This event is sent in the initial burst of events before thewp_tablet_tool.done event.<br/><br/>
            /// </summary>
            void OnHardwareSerial(NWayland.Protocols.TabletUnstableV1.ZwpTabletToolV1 eventSender, uint @hardwareSerialHi, uint @hardwareSerialLo);

            /// <summary>
            /// This event notifies the client of a hardware id available on this tool.<br/><br/>
            /// The hardware id is a device-specific 64-bit id that provides extrainformation about the tool in use, beyond the wl_tool.typeenumeration. The format of the id is specific to tablets made byWacom Inc. For example, the hardware id of a Wacom GripPen (a stylus) is 0x802.<br/><br/>
            /// This event is sent in the initial burst of events before thewp_tablet_tool.done event.<br/><br/>
            /// </summary>
            void OnHardwareIdWacom(NWayland.Protocols.TabletUnstableV1.ZwpTabletToolV1 eventSender, uint @hardwareIdHi, uint @hardwareIdLo);

            /// <summary>
            /// This event notifies the client of any capabilities of this tool,beyond the main set of x/y axes and tip up/down detection.<br/><br/>
            /// One event is sent for each extra capability available on this tool.<br/><br/>
            /// This event is sent in the initial burst of events before thewp_tablet_tool.done event.<br/><br/>
            /// </summary>
            void OnCapability(NWayland.Protocols.TabletUnstableV1.ZwpTabletToolV1 eventSender, CapabilityEnum @capability);

            /// <summary>
            /// This event signals the end of the initial burst of descriptiveevents. A client may consider the static description of the tool tobe complete and finalize initialization of the tool.<br/><br/>
            /// </summary>
            void OnDone(NWayland.Protocols.TabletUnstableV1.ZwpTabletToolV1 eventSender);

            /// <summary>
            /// This event is sent when the tool is removed from the system and willsend no further events. Should the physical tool come back intoproximity later, a new wp_tablet_tool object will be created.<br/><br/>
            /// It is compositor-dependent when a tool is removed. A compositor mayremove a tool on proximity out, tablet removal or any other reason.A compositor may also keep a tool alive until shutdown.<br/><br/>
            /// If the tool is currently in proximity, a proximity_out event will besent before the removed event. See wp_tablet_tool.proximity_out forthe handling of any buttons logically down.<br/><br/>
            /// When this event is received, the client must wp_tablet_tool.destroythe object.<br/><br/>
            /// </summary>
            void OnRemoved(NWayland.Protocols.TabletUnstableV1.ZwpTabletToolV1 eventSender);

            /// <summary>
            /// Notification that this tool is focused on a certain surface.<br/><br/>
            /// This event can be received when the tool has moved from one surface toanother, or when the tool has come back into proximity above thesurface.<br/><br/>
            /// If any button is logically down when the tool comes into proximity,the respective button event is sent after the proximity_in event butwithin the same frame as the proximity_in event.<br/><br/>
            /// </summary>
            void OnProximityIn(NWayland.Protocols.TabletUnstableV1.ZwpTabletToolV1 eventSender, uint @serial, NWayland.Protocols.TabletUnstableV1.ZwpTabletV1 @tablet, NWayland.Protocols.Wayland.WlSurface @surface);

            /// <summary>
            /// Notification that this tool has either left proximity, or is nolonger focused on a certain surface.<br/><br/>
            /// When the tablet tool leaves proximity of the tablet, button releaseevents are sent for each button that was held down at the time ofleaving proximity. These events are sent before the proximity_outevent but within the same wp_tablet.frame.<br/><br/>
            /// If the tool stays within proximity of the tablet, but the focuschanges from one surface to another, a button release event may notbe sent until the button is actually released or the tool leaves theproximity of the tablet.<br/><br/>
            /// </summary>
            void OnProximityOut(NWayland.Protocols.TabletUnstableV1.ZwpTabletToolV1 eventSender);

            /// <summary>
            /// Sent whenever the tablet tool comes in contact with the surface of thetablet.<br/><br/>
            /// If the tool is already in contact with the tablet when entering theinput region, the client owning said region will receive awp_tablet.proximity_in event, followed by a wp_tablet.downevent and a wp_tablet.frame event.<br/><br/>
            /// Note that this event describes logical contact, not physicalcontact. On some devices, a compositor may not consider a tool inlogical contact until a minimum physical pressure threshold isexceeded.<br/><br/>
            /// </summary>
            void OnDown(NWayland.Protocols.TabletUnstableV1.ZwpTabletToolV1 eventSender, uint @serial);

            /// <summary>
            /// Sent whenever the tablet tool stops making contact with the surface ofthe tablet, or when the tablet tool moves out of the input regionand the compositor grab (if any) is dismissed.<br/><br/>
            /// If the tablet tool moves out of the input region while in contactwith the surface of the tablet and the compositor does not have anongoing grab on the surface, the client owning said region willreceive a wp_tablet.up event, followed by a wp_tablet.proximity_outevent and a wp_tablet.frame event. If the compositor has an ongoinggrab on this device, this event sequence is sent whenever the grabis dismissed in the future.<br/><br/>
            /// Note that this event describes logical contact, not physicalcontact. On some devices, a compositor may not consider a tool outof logical contact until physical pressure falls below a specificthreshold.<br/><br/>
            /// </summary>
            void OnUp(NWayland.Protocols.TabletUnstableV1.ZwpTabletToolV1 eventSender);

            /// <summary>
            /// Sent whenever a tablet tool moves.<br/><br/>
            /// </summary>
            void OnMotion(NWayland.Protocols.TabletUnstableV1.ZwpTabletToolV1 eventSender, WlFixed @x, WlFixed @y);

            /// <summary>
            /// Sent whenever the pressure axis on a tool changes. The value of thisevent is normalized to a value between 0 and 65535.<br/><br/>
            /// Note that pressure may be nonzero even when a tool is not in logicalcontact. See the down and up events for more details.<br/><br/>
            /// </summary>
            void OnPressure(NWayland.Protocols.TabletUnstableV1.ZwpTabletToolV1 eventSender, uint @pressure);

            /// <summary>
            /// Sent whenever the distance axis on a tool changes. The value of thisevent is normalized to a value between 0 and 65535.<br/><br/>
            /// Note that distance may be nonzero even when a tool is not in logicalcontact. See the down and up events for more details.<br/><br/>
            /// </summary>
            void OnDistance(NWayland.Protocols.TabletUnstableV1.ZwpTabletToolV1 eventSender, uint @distance);

            /// <summary>
            /// Sent whenever one or both of the tilt axes on a tool change. Each tiltvalue is in 0.01 of a degree, relative to the z-axis of the tablet.The angle is positive when the top of a tool tilts along thepositive x or y axis.<br/><br/>
            /// </summary>
            void OnTilt(NWayland.Protocols.TabletUnstableV1.ZwpTabletToolV1 eventSender, int @tiltX, int @tiltY);

            /// <summary>
            /// Sent whenever the z-rotation axis on the tool changes. Therotation value is in 0.01 of a degree clockwise from the tool'slogical neutral position.<br/><br/>
            /// </summary>
            void OnRotation(NWayland.Protocols.TabletUnstableV1.ZwpTabletToolV1 eventSender, int @degrees);

            /// <summary>
            /// Sent whenever the slider position on the tool changes. Thevalue is normalized between -65535 and 65535, with 0 as the logicalneutral position of the slider.<br/><br/>
            /// The slider is available on e.g. the Wacom Airbrush tool.<br/><br/>
            /// </summary>
            void OnSlider(NWayland.Protocols.TabletUnstableV1.ZwpTabletToolV1 eventSender, int @position);

            /// <summary>
            /// Sent whenever the wheel on the tool emits an event. This eventcontains two values for the same axis change. The degrees value isin 0.01 of a degree in the same orientation as thewl_pointer.vertical_scroll axis. The clicks value is in discretelogical clicks of the mouse wheel. This value may be zero if themovement of the wheel was less than one logical click.<br/><br/>
            /// Clients should choose either value and avoid mixing degrees andclicks. The compositor may accumulate values smaller than a logicalclick and emulate click events when a certain threshold is met.Thus, wl_tablet_tool.wheel events with non-zero clicks values mayhave different degrees values.<br/><br/>
            /// </summary>
            void OnWheel(NWayland.Protocols.TabletUnstableV1.ZwpTabletToolV1 eventSender, int @degrees, int @clicks);

            /// <summary>
            /// Sent whenever a button on the tool is pressed or released.<br/><br/>
            /// If a button is held down when the tool moves in or out of proximity,button events are generated by the compositor. Seewp_tablet_tool.proximity_in and wp_tablet_tool.proximity_out fordetails.<br/><br/>
            /// </summary>
            void OnButton(NWayland.Protocols.TabletUnstableV1.ZwpTabletToolV1 eventSender, uint @serial, uint @button, ButtonStateEnum @state);

            /// <summary>
            /// Marks the end of a series of axis and/or button updates from thetablet. The Wayland protocol requires axis updates to be sentsequentially, however all events within a frame should be consideredone hardware event.<br/><br/>
            /// </summary>
            void OnFrame(NWayland.Protocols.TabletUnstableV1.ZwpTabletToolV1 eventSender, uint @time);
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
            switch (opcode)
            {
                case 0:
                    Events?.OnType(this, (TypeEnum)arguments[0].UInt32);
                    break;
                case 1:
                    Events?.OnHardwareSerial(this, arguments[0].UInt32, arguments[1].UInt32);
                    break;
                case 2:
                    Events?.OnHardwareIdWacom(this, arguments[0].UInt32, arguments[1].UInt32);
                    break;
                case 3:
                    Events?.OnCapability(this, (CapabilityEnum)arguments[0].UInt32);
                    break;
                case 4:
                    Events?.OnDone(this);
                    break;
                case 5:
                    Events?.OnRemoved(this);
                    break;
                case 6:
                    Events?.OnProximityIn(this, arguments[0].UInt32, WlProxy.FromNative<NWayland.Protocols.TabletUnstableV1.ZwpTabletV1>(arguments[1].IntPtr), WlProxy.FromNative<NWayland.Protocols.Wayland.WlSurface>(arguments[2].IntPtr));
                    break;
                case 7:
                    Events?.OnProximityOut(this);
                    break;
                case 8:
                    Events?.OnDown(this, arguments[0].UInt32);
                    break;
                case 9:
                    Events?.OnUp(this);
                    break;
                case 10:
                    Events?.OnMotion(this, arguments[0].WlFixed, arguments[1].WlFixed);
                    break;
                case 11:
                    Events?.OnPressure(this, arguments[0].UInt32);
                    break;
                case 12:
                    Events?.OnDistance(this, arguments[0].UInt32);
                    break;
                case 13:
                    Events?.OnTilt(this, arguments[0].Int32, arguments[1].Int32);
                    break;
                case 14:
                    Events?.OnRotation(this, arguments[0].Int32);
                    break;
                case 15:
                    Events?.OnSlider(this, arguments[0].Int32);
                    break;
                case 16:
                    Events?.OnWheel(this, arguments[0].Int32, arguments[1].Int32);
                    break;
                case 17:
                    Events?.OnButton(this, arguments[0].UInt32, arguments[1].UInt32, (ButtonStateEnum)arguments[2].UInt32);
                    break;
                case 18:
                    Events?.OnFrame(this, arguments[0].UInt32);
                    break;
            }
        }

        /// <summary>
        /// Describes the physical type of a tool. The physical type of a toolgenerally defines its base usage.<br/><br/>
        /// The mouse tool represents a mouse-shaped tool that is not a relativedevice but bound to the tablet's surface, providing absolutecoordinates.<br/><br/>
        /// The lens tool is a mouse-shaped tool with an attached lens toprovide precision focus.<br/><br/>
        /// </summary>
        public enum TypeEnum
        {
            /// <summary>
            /// Pen<br/><br/>
            /// </summary>
            Pen = 0x140,
            /// <summary>
            /// Eraser<br/><br/>
            /// </summary>
            Eraser = 0x141,
            /// <summary>
            /// Brush<br/><br/>
            /// </summary>
            Brush = 0x142,
            /// <summary>
            /// Pencil<br/><br/>
            /// </summary>
            Pencil = 0x143,
            /// <summary>
            /// Airbrush<br/><br/>
            /// </summary>
            Airbrush = 0x144,
            /// <summary>
            /// Finger<br/><br/>
            /// </summary>
            Finger = 0x145,
            /// <summary>
            /// Mouse<br/><br/>
            /// </summary>
            Mouse = 0x146,
            /// <summary>
            /// Lens<br/><br/>
            /// </summary>
            Lens = 0x147
        }

        /// <summary>
        /// Describes extra capabilities on a tablet.<br/><br/>
        /// Any tool must provide x and y values, extra axes aredevice-specific.<br/><br/>
        /// </summary>
        public enum CapabilityEnum
        {
            /// <summary>
            /// Tilt axes<br/><br/>
            /// </summary>
            Tilt = 1,
            /// <summary>
            /// Pressure axis<br/><br/>
            /// </summary>
            Pressure = 2,
            /// <summary>
            /// Distance axis<br/><br/>
            /// </summary>
            Distance = 3,
            /// <summary>
            /// Z-rotation axis<br/><br/>
            /// </summary>
            Rotation = 4,
            /// <summary>
            /// Slider axis<br/><br/>
            /// </summary>
            Slider = 5,
            /// <summary>
            /// Wheel axis<br/><br/>
            /// </summary>
            Wheel = 6
        }

        /// <summary>
        /// Describes the physical state of a button that produced the button event.<br/><br/>
        /// </summary>
        public enum ButtonStateEnum
        {
            /// <summary>
            /// button is not pressed<br/><br/>
            /// </summary>
            Released = 0,
            /// <summary>
            /// button is pressed<br/><br/>
            /// </summary>
            Pressed = 1
        }

        public enum ErrorEnum
        {
            /// <summary>
            /// given wl_surface has another role<br/><br/>
            /// </summary>
            Role = 0
        }

        private class ProxyFactory : IBindFactory<ZwpTabletToolV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.TabletUnstableV1.ZwpTabletToolV1.WlInterface);
            }

            public ZwpTabletToolV1 Create(IntPtr handle, int version)
            {
                return new ZwpTabletToolV1(handle, version);
            }
        }

        public static IBindFactory<ZwpTabletToolV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zwp_tablet_tool_v1";
        public const int InterfaceVersion = 1;

        public ZwpTabletToolV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    /// <summary>
    /// The wp_tablet interface represents one graphics tablet device. Thetablet interface itself does not generate events; all events aregenerated by wp_tablet_tool objects when in proximity above a tablet.<br/><br/>
    /// A tablet has a number of static characteristics, e.g. device name andpid/vid. These capabilities are sent in an event sequence after thewp_tablet_seat.tablet_added event. This initial event sequence isterminated by a wp_tablet.done event.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZwpTabletV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZwpTabletV1()
        {
            NWayland.Protocols.TabletUnstableV1.ZwpTabletV1.WlInterface = new WlInterface("zwp_tablet_v1", 1, new WlMessage[] {
                new WlMessage("destroy", "", new WlInterface*[] { })
            }, new WlMessage[] {
                new WlMessage("name", "s", new WlInterface*[] { null }),
                new WlMessage("id", "uu", new WlInterface*[] { null, null }),
                new WlMessage("path", "s", new WlInterface*[] { null }),
                new WlMessage("done", "", new WlInterface*[] { }),
                new WlMessage("removed", "", new WlInterface*[] { })
            });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.TabletUnstableV1.ZwpTabletV1.WlInterface);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
            base.Dispose(true);
        }

        public interface IEvents
        {
            /// <summary>
            /// This event is sent in the initial burst of events before thewp_tablet.done event.<br/><br/>
            /// </summary>
            void OnName(NWayland.Protocols.TabletUnstableV1.ZwpTabletV1 eventSender, string @name);

            /// <summary>
            /// This event is sent in the initial burst of events before thewp_tablet.done event.<br/><br/>
            /// </summary>
            void OnId(NWayland.Protocols.TabletUnstableV1.ZwpTabletV1 eventSender, uint @vid, uint @pid);

            /// <summary>
            /// A system-specific device path that indicates which device is behindthis wp_tablet. This information may be used to gather additionalinformation about the device, e.g. through libwacom.<br/><br/>
            /// A device may have more than one device path. If so, multiplewp_tablet.path events are sent. A device may be emulated and nothave a device path, and in that case this event will not be sent.<br/><br/>
            /// The format of the path is unspecified, it may be a device node, asysfs path, or some other identifier. It is up to the client toidentify the string provided.<br/><br/>
            /// This event is sent in the initial burst of events before thewp_tablet.done event.<br/><br/>
            /// </summary>
            void OnPath(NWayland.Protocols.TabletUnstableV1.ZwpTabletV1 eventSender, string @path);

            /// <summary>
            /// This event is sent immediately to signal the end of the initialburst of descriptive events. A client may consider the staticdescription of the tablet to be complete and finalize initializationof the tablet.<br/><br/>
            /// </summary>
            void OnDone(NWayland.Protocols.TabletUnstableV1.ZwpTabletV1 eventSender);

            /// <summary>
            /// Sent when the tablet has been removed from the system. When a tabletis removed, some tools may be removed.<br/><br/>
            /// When this event is received, the client must wp_tablet.destroythe object.<br/><br/>
            /// </summary>
            void OnRemoved(NWayland.Protocols.TabletUnstableV1.ZwpTabletV1 eventSender);
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
            switch (opcode)
            {
                case 0:
                    Events?.OnName(this, Marshal.PtrToStringAnsi(arguments[0].IntPtr));
                    break;
                case 1:
                    Events?.OnId(this, arguments[0].UInt32, arguments[1].UInt32);
                    break;
                case 2:
                    Events?.OnPath(this, Marshal.PtrToStringAnsi(arguments[0].IntPtr));
                    break;
                case 3:
                    Events?.OnDone(this);
                    break;
                case 4:
                    Events?.OnRemoved(this);
                    break;
            }
        }

        private class ProxyFactory : IBindFactory<ZwpTabletV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.TabletUnstableV1.ZwpTabletV1.WlInterface);
            }

            public ZwpTabletV1 Create(IntPtr handle, int version)
            {
                return new ZwpTabletV1(handle, version);
            }
        }

        public static IBindFactory<ZwpTabletV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zwp_tablet_v1";
        public const int InterfaceVersion = 1;

        public ZwpTabletV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }
}